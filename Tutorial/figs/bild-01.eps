%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.1.0
%%Canvassize: 16383
%%BoundingBox: 99 -448 576 -154
%%HiResBoundingBox: 99.1758 -447.0137 575.1758 -154.7974
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: MyriadPro-Regular
%%DocumentSuppliedFonts: MyriadPro-Regular
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Passermarken])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 421.5 -298.5 421.5 -298.5
%AI3_TileBox: 0.044922 -595.1201 841.9648 -0.160156
%AI3_DocumentPreview: Header
%AI5_ArtSize: 841.8896 595.2803
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -126 17 1.48 1626 920 18 0 0 9 77 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:115 -694
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 80 8
%%BeginData: 4594 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C457D7DFD5BA87DA8A8FD20FFA8FFA8A8A8FD57FFA8A8FFA87DA8FD1E
%FFA8FFFFA8A8A8FD57FFA8FFFFFFA8A8A8FD1CFFA8FD05FF7DA8A8FD53FF
%A8A8FD05FFA87DA8A8FD19FFA8FD06FFA8A8A8FD53FFA8FD07FFA8A8A8FD
%18FFA8FD09FF7DA8A8FD4FFFA8A8FD0AFF7DA8A8FD15FFA8FD0AFFA8A8A8
%FD4FFFA8FD0CFFA87DFD14FF7DFD0DFF7DA8A8FD4BFFA8A8FD0EFF7DA8A8
%FD11FFA8FD0EFFA8A8A8FD4BFFA8FD10FFA87DA8FD0FFF7DFD11FFA8A8A8
%FD47FFA8A8FD12FFA8A8A8FD0DFFA8FD13FFA87DFD47FFA8FD15FFA8A8A8
%FD0AFFA8FD15FF7DA8A8FD43FFA8A8FD16FFA8A87DA8FD08FFA8FD17FFA8
%A8FD43FFA8FD19FFA8A8A8FD06FFA8FD19FF7DA8A8FD3FFFA8A8FD1BFFA8
%7DA8FD04FFA8FD1AFFA8A8A8FD3FFFA8FD1DFFA8A8A8FFFF7DFD1DFFA8A8
%A8FFFD59A8FFA8A87D7DA8FD1EFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7DFD1FFFA8FD5EFFA8
%A8FD1FFFA8FD5EFFA8A8FD1FFFA8FD5EFFA8A8FD1FFFA8FD5EFFA8A8FD1F
%FFA8FD5EFFA8A8FD1EFFA8A8FD5EFFA87DFD1FFFA8FD5EFFA8A8FD1EFFA8
%A8FD5EFFA87DFD1FFFA8FD5EFFA8A8FD1FFFA8FD5EFFA8A8FD1FFFA8FD5E
%FFA8A8FD1FFFA8FD5EFFA8A8FD1FFFA8FD5EFFA8A8FD1EFFA8A8FD5EFFA8
%7DFD1FFFA8FD5EFFA8A8FD1EFFA8A8FD5EFFA87DFD1FFFA8FD5EFFA8A8FD
%1FFFA8FD5EFFA8A8FD1FFFA8FD5EFFA8A8FD1FFFA8FD5EFFA8A8FD1FFFA8
%FD10FFA8A87D7DA8A8FF7DA8A8A87D7D7DA87DA8A87D7DFD3AFFA8A8FD1E
%FFA8A8FD10FF52272752FD057DA82727F8A8F82752A8527DA8FD39FFA87D
%FD1FFFA8FD10FF7DFD07527DA852527DFD0752FD3AFFA8A8FD1EFFA8A8FD
%14FFA8FFA8FD0BFFA8FD3BFFA87DFD1FFFA8FD5EFFA8A8FD1FFFA8FD5EFF
%A8A8FD1FFFA8FD5EFFA8A8FD1FFFA8FD1EFFA8FD19FFA8FD25FFA8A8FD1F
%FFA8FD10FF7D7DA87D7D7DA87D7D7DA87DA85252272752FFA87D52A87DA8
%52A87D7D52A87D7D277D52FFA87D527D527D7DA8FD21FFA8A8FD1EFFA8A8
%FD10FF52A8275227527D27522727527D7D27527D52FF7D52522752275227
%27277D7DF827F87D527DFF52FF527D527DA8FD21FFA87DFD1FFFA8FD10FF
%A87D7D7DA87D7D52A87D7D7DFFA87DA8FFFD067D52FD067DFF7DA87DA87D
%A8FF7D527D7D7DA8FD22FFA8A8FD1EFFA8A8FD16FFA8FD47FFA87DFD1FFF
%A8FD5EFFA8A8FD1FFFA8FD5EFFA87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD5EFFA87D7DFFFD1BA8CFA8A8
%FD5EFFA8FFA8A8FD1DFFA8FD5EFFA8FFFFA8A8FD1BFFA8A8FD5EFFA8FFFF
%FFA87DFD1BFFA8FD5EFFA8FD05FF7DFD19FFA8A8FD5EFFA8FD06FF7DFD19
%FFA8FD5EFFA8FD07FF7DA8FD17FFA8FD5EFFA8FD08FF7DA8FD16FFA8FD5E
%FFA8FD09FFA8A8FD15FFA8FD5EFFA8FD0AFFA8A8A8FD13FFA8FD5EFFA8FD
%0BFFA8A8A8FD11FFA8A8FD5EFFA8FD0DFFA8A8FD11FFA8FD5EFFA8FD0EFF
%A87DFD0FFFA8A8FD5EFFA8FD0FFFA87DFD0FFFA8FD5EFFA8FD11FF7DFD0E
%FFA8FD5EFFA8FD12FF7DA8FD0CFFA8FD5EFFA8FD13FFA8A8FD0BFFA8FD5E
%FFA8FD14FFA8A8FD0AFFA8FD5EFFA8FD15FFA8A8A8FD07FFA8A8FD5EFFA8
%FD16FFA87DA8FD07FFA8FD5EFFA8FD18FFA8A8FD05FFA8A8FD5EFFA8FD19
%FFA87DFD05FFA8FD5EFFA8FD1BFF7DFD04FFA8FD5EFFA8FD1CFF7DFFFFFF
%A8FD5EFFA8FD1DFF7DFFFFA8FD5EFFA8FD1EFF7DA8A8FD5EFFA8FD1FFFFD
%60A87DFD24FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
/MyriadPro-Regular havefont not {
%%BeginFont: MyriadPro-Regular
/MyriadPro-Regular
15 dict dup begin
/FontName /MyriadPro-Regular def
/FontType 3 def
/FontMatrix [ 0.001000 0 0 0.001000 0 0 ] def
/FontAscent 952 def
/FontDescent -250 def
/FontScript 0 def
/FontBBox [ 0 -500 1000 1000 ] def
/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
/l /lineto load def
/m /moveto load def
/c /curveto load def
/BuildChar {
	Adobe_Illustrator_AI5_vars exch /_bitlobyte exch put
	Adobe_Illustrator_AI5_vars exch /_bitfont exch put
	Adobe_Illustrator_AI5_vars /_bithibyte 0 put

	_bitlobyte 16 4 string cvrs dup length (K) dup length
	dup 4 -1 roll add string Adobe_Illustrator_AI5_vars exch /_bitkey exch put
	exch _bitkey copy pop _bitkey exch 3 -1 roll putinterval
	_bitfont /CharMetrics get _bitkey cvn get dup type /arraytype
	eq { aload pop setcachedevice }
	{ 0 setcharwidth } ifelse
	_bitfont /CharStrings get _bitkey cvn get exec
} bind def
29 dict dup begin
/K20 {
} bind def
/K21 {
{
149 193 m
163 674 l
67 674 l
81 193 l
closepath
114 -11 m
151 -11 174 16 174 51 c
174 87 151 113 116 113 c
81 113 56 87 56 51 c
56 16 80 -11 114 -11 c
closepath
} exec
fill
} bind def
/K2C {
{
78 -117 m
106 -70 150 41 174 126 c
76 116 l
65 43 38 -64 16 -124 c
closepath
} exec
fill
} bind def
/K2D {
{
30 302 m
30 238 l
277 238 l
277 302 l
closepath
} exec
fill
} bind def
/K35 {
{
433 650 m
122 650 l
80 338 l
104 341 133 344 171 344 c
300 344 357 285 357 201 c
358 114 286 60 204 60 c
144 60 91 80 64 96 c
42 29 l
74 9 133 -11 204 -11 c
345 -11 446 84 446 211 c
446 292 404 349 353 377 c
313 402 264 412 213 412 c
189 412 175 411 160 409 c
185 576 l
433 576 l
closepath
} exec
fill
} bind def
/K43 {
{
529 91 m
494 74 440 63 386 63 c
223 63 128 168 128 334 c
128 511 233 612 391 612 c
447 612 494 600 526 584 c
548 655 l
525 667 471 685 388 685 c
179 685 36 543 36 331 c
36 109 178 -11 368 -11 c
450 -11 515 5 546 21 c
closepath
} exec
fill
} bind def
/K44 {
{
76 2 m
120 -3 171 -6 234 -6 c
365 -6 469 28 533 91 c
595 153 630 243 630 353 c
630 462 595 540 534 595 c
475 649 386 679 261 679 c
192 679 129 673 76 664 c
closepath
163 601 m
186 606 220 610 265 610 c
449 610 539 509 538 350 c
538 168 438 64 251 64 c
217 64 185 65 163 68 c
closepath
} exec
fill
} bind def
/K45 {
{
424 388 m
163 388 l
163 601 l
440 601 l
440 674 l
75 674 l
75 0 l
455 0 l
455 73 l
163 73 l
163 316 l
424 316 l
closepath
} exec
fill
} bind def
/K48 {
{
75 674 m
75 0 l
163 0 l
163 316 l
489 316 l
489 0 l
577 0 l
577 674 l
489 674 l
489 392 l
163 392 l
163 674 l
closepath
} exec
fill
} bind def
/K49 {
{
75 674 m
75 0 l
163 0 l
163 674 l
closepath
} exec
fill
} bind def
/K4C {
{
75 0 m
451 0 l
451 73 l
163 73 l
163 674 l
75 674 l
closepath
} exec
fill
} bind def
/K4F {
{
348 686 m
168 686 36 546 36 332 c
36 128 160 -11 339 -11 c
511 -11 652 113 652 344 c
652 545 533 686 348 686 c
closepath
345 615 m
490 615 560 475 560 340 c
560 187 482 60 344 60 c
206 60 128 189 128 334 c
128 481 200 615 345 615 c
closepath
} exec
fill
} bind def
/K50 {
{
76 0 m
163 0 l
163 270 l
183 265 207 264 233 264 c
318 264 392 289 439 338 c
473 373 491 421 491 482 c
491 542 468 591 432 623 c
392 659 329 679 243 679 c
173 679 118 673 76 666 c
closepath
163 603 m
178 607 207 610 245 610 c
340 610 404 567 404 477 c
404 386 340 334 235 334 c
206 334 182 336 163 341 c
closepath
} exec
fill
} bind def
/K52 {
{
76 0 m
163 0 l
163 292 l
245 292 l
324 289 361 254 381 161 c
399 77 414 20 425 0 c
515 0 l
501 26 485 91 463 185 c
447 255 416 303 365 321 c
365 324 l
435 348 491 407 491 495 c
491 548 471 594 438 624 c
397 661 336 679 243 679 c
184 679 120 673 76 665 c
closepath
163 604 m
178 608 207 611 249 611 c
341 611 404 573 404 486 c
404 409 345 358 252 358 c
163 358 l
closepath
} exec
fill
} bind def
/K53 {
{
42 33 m
78 9 149 -11 214 -11 c
373 -11 449 80 449 184 c
449 283 392 338 278 382 c
185 418 144 449 144 512 c
144 558 179 613 271 613 c
332 613 377 594 398 581 c
422 652 l
393 669 342 685 274 685 c
143 685 56 607 56 502 c
56 408 124 350 234 310 c
325 276 361 239 361 177 c
361 109 309 62 220 62 c
160 62 104 81 65 106 c
closepath
} exec
fill
} bind def
/K57 {
{
277 0 m
373 351 l
398 438 414 504 425 571 c
427 571 l
436 503 450 437 471 351 c
556 0 l
647 0 l
838 674 l
749 674 l
660 334 l
639 250 620 175 606 101 c
604 101 l
594 172 576 252 557 332 c
475 674 l
384 674 l
294 334 l
271 247 250 167 239 100 c
237 100 l
225 165 207 249 187 333 c
107 674 l
15 674 l
186 0 l
closepath
} exec
fill
} bind def
/K61 {
{
413 297 m
413 393 377 494 229 494 c
168 494 109 477 69 452 c
89 393 l
123 416 170 429 216 429 c
315 430 326 357 326 318 c
326 308 l
139 309 35 245 35 128 c
35 58 85 -11 183 -11 c
252 -11 304 23 331 61 c
334 61 l
341 0 l
420 0 l
415 33 413 74 413 116 c
closepath
328 163 m
328 155 327 145 324 135 c
310 94 269 54 205 54 c
161 54 123 80 123 138 c
123 232 232 249 328 247 c
closepath
} exec
fill
} bind def
/K63 {
{
403 83 m
378 72 345 60 295 60 c
199 60 127 129 127 241 c
127 341 187 424 298 424 c
346 424 379 412 400 401 c
420 468 l
396 481 350 494 298 494 c
140 494 38 385 38 236 c
38 88 133 -11 279 -11 c
344 -11 395 6 418 17 c
closepath
} exec
fill
} bind def
/K64 {
{
403 710 m
403 421 l
401 421 l
379 459 330 494 255 494 c
138 494 37 396 38 235 c
38 88 129 -11 246 -11 c
325 -11 383 30 409 84 c
412 84 l
416 0 l
494 0 l
492 33 490 82 490 125 c
490 710 l
closepath
403 203 m
403 189 402 177 399 165 c
383 100 329 60 270 60 c
176 60 127 141 127 239 c
127 345 181 425 272 425 c
338 425 386 379 399 324 c
402 313 403 298 403 287 c
closepath
} exec
fill
} bind def
/K65 {
{
462 226 m
464 236 465 249 465 267 c
465 356 424 494 265 494 c
124 494 38 380 38 234 c
38 88 127 -11 276 -11 c
353 -11 407 6 438 20 c
422 83 l
390 69 351 58 288 58 c
199 58 124 107 122 226 c
closepath
123 289 m
130 350 168 431 258 431 c
357 431 381 344 380 289 c
closepath
} exec
fill
} bind def
/K68 {
{
73 0 m
161 0 l
161 292 l
161 308 162 321 167 334 c
184 381 228 421 285 421 c
368 421 397 356 397 278 c
397 0 l
485 0 l
485 288 l
485 454 381 494 316 494 c
283 494 252 485 226 470 c
199 455 177 432 163 407 c
161 407 l
161 710 l
73 710 l
closepath
} exec
fill
} bind def
/K69 {
{
161 0 m
161 484 l
73 484 l
73 0 l
closepath
117 675 m
84 675 62 650 62 620 c
62 590 83 566 115 566 c
150 566 171 590 171 620 c
171 651 149 675 117 675 c
closepath
} exec
fill
} bind def
/K6D {
{
73 0 m
159 0 l
159 291 l
159 306 161 322 166 334 c
180 378 221 422 275 422 c
342 422 376 367 376 290 c
376 0 l
462 0 l
462 299 l
462 315 465 330 469 343 c
485 385 523 422 574 422 c
644 422 679 367 679 273 c
679 0 l
765 0 l
765 284 l
765 452 670 494 605 494 c
559 494 528 482 499 460 c
479 445 459 425 444 397 c
442 397 l
421 454 371 494 306 494 c
225 494 180 451 153 405 c
150 405 l
146 484 l
69 484 l
71 444 73 404 73 353 c
closepath
} exec
fill
} bind def
/K6F {
{
278 494 m
145 494 38 399 38 238 c
38 85 140 -11 270 -11 c
386 -11 511 67 511 246 c
511 393 417 494 278 494 c
closepath
276 428 m
380 428 421 325 421 243 c
421 134 358 55 274 55 c
188 55 128 135 128 241 c
128 332 173 428 276 428 c
closepath
} exec
fill
} bind def
/K72 {
{
73 0 m
161 0 l
161 258 l
161 272 162 287 164 299 c
176 365 220 411 282 411 c
294 411 303 411 312 409 c
312 492 l
304 493 297 494 288 494 c
229 494 175 453 153 388 c
150 388 l
146 484 l
69 484 l
72 439 73 390 73 333 c
closepath
} exec
fill
} bind def
/K74 {
{
93 574 m
93 484 l
18 484 l
18 417 l
93 417 l
93 153 l
93 96 103 53 127 26 c
148 3 181 -11 222 -11 c
256 -11 283 -5 300 1 c
296 68 l
283 64 269 62 245 62 c
196 62 179 96 179 156 c
179 417 l
305 417 l
305 484 l
179 484 l
179 600 l
closepath
} exec
fill
} bind def
/K75 {
{
478 484 m
390 484 l
390 188 l
390 171 387 155 382 143 c
366 103 325 62 266 62 c
187 62 158 125 158 217 c
158 484 l
70 484 l
70 201 l
70 32 161 -11 237 -11 c
323 -11 375 40 397 79 c
399 79 l
404 0 l
482 0 l
479 38 478 82 478 133 c
closepath
} exec
fill
} bind def
/K77 {
{
18 484 m
164 0 l
244 0 l
322 230 l
339 282 354 332 366 390 c
368 390 l
380 333 394 285 411 231 c
485 0 l
565 0 l
721 484 l
634 484 l
565 241 l
549 184 536 133 528 84 c
525 84 l
514 133 500 184 482 242 c
407 484 l
333 484 l
254 237 l
238 185 222 133 211 84 c
208 84 l
199 134 186 184 173 238 c
108 484 l
closepath
} exec
fill
} bind def
/K79 {
{
9 484 m
187 38 l
192 27 194 20 194 15 c
194 10 191 3 187 -6 c
166 -51 137 -85 113 -104 c
87 -126 58 -140 36 -147 c
58 -220 l
80 -216 122 -201 166 -164 c
226 -111 269 -27 332 139 c
464 484 l
371 484 l
275 200 l
263 165 253 128 244 99 c
242 99 l
234 128 222 166 210 198 c
105 484 l
closepath
} exec
fill
} bind def
end /CharStrings exch def
29 dict dup begin
/K20 [212 0 0 0 0 0] def
Encoding 32 /K20 put
/K21 [230 0 56 -11 174 674] def
Encoding 33 /K21 put
/K2C [207 0 16 -124 174 126] def
Encoding 44 /K2C put
/K2D [307 0 30 238 277 302] def
Encoding 45 /K2D put
/K35 [513 0 42 -11 446 650] def
Encoding 53 /K35 put
/K43 [580 0 36 -11 548 685] def
Encoding 67 /K43 put
/K44 [666 0 76 -6 630 679] def
Encoding 68 /K44 put
/K45 [492 0 75 0 455 674] def
Encoding 69 /K45 put
/K48 [652 0 75 0 577 674] def
Encoding 72 /K48 put
/K49 [239 0 75 0 163 674] def
Encoding 73 /K49 put
/K4C [472 0 75 0 451 674] def
Encoding 76 /K4C put
/K4F [689 0 36 -11 652 686] def
Encoding 79 /K4F put
/K50 [532 0 76 0 491 679] def
Encoding 80 /K50 put
/K52 [538 0 76 0 515 679] def
Encoding 82 /K52 put
/K53 [493 0 42 -11 449 685] def
Encoding 83 /K53 put
/K57 [846 0 15 0 838 674] def
Encoding 87 /K57 put
/K61 [482 0 35 -11 420 494] def
Encoding 97 /K61 put
/K63 [448 0 38 -11 420 494] def
Encoding 99 /K63 put
/K64 [564 0 38 -11 494 710] def
Encoding 100 /K64 put
/K65 [501 0 38 -11 465 494] def
Encoding 101 /K65 put
/K68 [555 0 73 0 485 710] def
Encoding 104 /K68 put
/K69 [234 0 62 0 171 675] def
Encoding 105 /K69 put
/K6D [834 0 69 0 765 494] def
Encoding 109 /K6D put
/K6F [549 0 38 -11 511 494] def
Encoding 111 /K6F put
/K72 [327 0 69 0 312 494] def
Encoding 114 /K72 put
/K74 [331 0 18 -11 305 600] def
Encoding 116 /K74 put
/K75 [551 0 70 -11 482 484] def
Encoding 117 /K75 put
/K77 [736 0 18 0 721 484] def
Encoding 119 /K77 put
/K79 [471 0 9 -220 464 484] def
Encoding 121 /K79 put
end /CharMetrics exch def
end
/MyriadPro-Regular havefont not {
definefont pop
}
{
pop pop
} ifelse
%%EndFont
} if
setpacking
%AI3_EndRider
[
39/quotesingle 96/grave 128/Euro 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _MyriadPro-Regular MyriadPro-Regular
[/_MyriadPro-Regular/MyriadPro-Regular 0 0 1 TZ%AI3_EndEncoding AdobeType
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Nachzeichnen) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe H\374llen-Zusatzmodul) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe-Zusatzmodul Interaktiv malen) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Kalligrafiepinsel-Zusatzmodul) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Zusammengesetzte Form) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Lachsfarben radial)
(Lachsfarben radial) 1 2 Bd
[
<
000000000202020303040404050505060607060607080709080A09090A0B0B0C0C0E0E0E0F0E0E0F
0F0F1010101111111212121313141414161616171717181717191818181919191A1A191B1B1A1B1B
1B1C1C1C1E1E1E1E1F1F1F2020202120202021212122222121232222232323232424242525252526
262626272727262827272828282829292929292929292A2A2A2A2A2B2A2A2A2B2B2B2B2B2B2B2B2C
2C2B2B2B2C2C2C2C2D2D2D2D2D2E2E2E2E2E2F2F2F2E2F2F2F2F2F30303030303030303030303030
30303031313030303031313131313131313131313232323232323232323232323233333333333334
34333333333334343434343434343535353434343435353535353535353536363636363636363536
36363636363636363737363636363636363636373737373737373736363636373737373737373737
37373737373737373737373737373737373737373737383837373737373737373737373737373737
37373737373737383838383838383838383838383838383838383838383838383838383838383838
3838383838
>
<
00000103040507080A0B0D0F101112131415171819191A1B1D1D1F212123252627282A2A2A2C2D2E
2F3031333334353637393A3B3B3C3D3E404143424445464749484A4B4C4D4D4E4F51525353545556
5657585A5B5B5C5D5E5D5F5F61616163646465666867696A6B6B6C6D6C6E6F706F71727173747475
77767879797A7B7B7C7E7D7E8080818282838484858586878788888889898B8A8B8D8D8E8E8F9090
91919292939595969697979898999A9A9C9B9C9C9E9D9E9EA09FA1A0A2A2A3A3A4A3A5A5A6A6A7A7
A8A8A9A9A9AAAAABABABABACACACADADAEAEB0AFAFB0B0B2B2B3B2B2B4B4B5B5B5B6B6B5B7B7B8B8
B8B9B9B9BABABBBBBBBCBCBCBDBDBDBEBEBEC0C0C0C1C1C0C0C2C2C2C3C3C2C4C4C4C4C5C5C5C6C6
C6C6C7C7C7C7C8C8C8C8C9C9C9C9CACACACACBCBCBCBCBCCCCCCCCCECECDCDCDCECECECECECED0D0
D0D0D0D1D0D0D0D0D0D2D2D2D2D2D2D2D3D3D3D3D3D3D2D2D4D4D4D4D4D4D4D4D4D5D5D5D5D5D5D5
D5D5D5D5D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7
D7D7D7D7D7
>
<
00000102030404040506070809090A0B0B0C0B0C0D0E0F101011101112121314151415171818191A
191A1B1B1D1C1D1D1E1F201F2021222322232426252627282828292A2A292B2C2C2B2C2D2E2D2E2F
31303132333334353436363736383837383939393A3A3B3B3B3C3D3C3E3E3E3E403F404241424343
444544454546464647464849484A4B4A4C4B4C4C4C4E4D4E4E4F5150515152525251535454545455
54565557565757585859595A5A5B5A5C5B5D5C5D5D5E5D5F5E605F61606261636264636364646565
6666676767686869696A6A696B6B6C6C6B6D6C6E6E6D6F6E6E6F6F70707071717172727473737474
74757575767675777776787877797978787A79797C7A7A7D7D7C7C7E7D7D7F7E7E7E818080808181
81818282828284848383858585858486868685878787878689898988888A8A8A8989898B8B8B8A8A
8A8D8D8C8B8B8B8E8E8D8D8D8D8D8F8F8E8E8E8E8E8E90908F8F8F8F8F8F8F919191919191919191
91919193929292929292929292929292929292929393939393939393939393939393939393939393
9393939393
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000101010101010101010101
01010101020202020202020202020202020303030303030303030303040403030404040404040405
05050506060606060606070707070707070708080808080808080809090909090909090A0A0A0A0B
0B0B0B0B0B0C0C0C0C0D0D0D0D0E0E0E0E0E0F0F0F0F0F100F100F10101010101111111110101111
11111112121212121213131313131313131414141414141414141515151515151516161616161617
1717171717171818181818181818191919191919191A1A1A1A1A1A1A19191B1A1A1A1A1A1A1A1A1B
1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1C1C1C1C1D1D1D1D1D1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1E
1E1E1E1E1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F202020202020202020202020202020202020
20202020202020212121212121212121212121212121212121212121212121212121212121212121
2121212121
>
<
FFFFFEFEFDFDFDFCFCFBFBFBFAFAFAF9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F2F2F2F1F1F1F0
F0F0EFEFEFEEEEEEEDEDEDECECEBEBEBEAEAEAE9E9E9E8E8E8E7E7E7E7E6E6E6E5E5E5E4E4E4E3E3
E3E2E2E2E1E1E1E1E0E0E0DFDFDFDEDEDEDEDDDDDDDCDCDCDCDBDBDBDADADADAD9D9D9D8D8D8D8D7
D7D7D7D6D6D6D6D5D5D5D4D4D4D4D3D3D3D3D2D2D2D2D1D1D1D1D1D0D0D0D0CFCFCFCFCECECECECD
CDCDCDCDCCCCCCCCCBCBCBCBCBCACACACACAC9C9C9C9C8C8C8C8C8C7C7C7C7C7C6C6C6C6C6C6C5C5
C5C5C5C4C4C4C4C4C4C3C3C3C3C3C2C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBFBFBFBE
BEBEBEBEBEBEBDBDBDBDBDBDBDBDBCBCBCBCBCBCBCBBBBBBBBBBBBBBBBBBBABABABABABABABABAB9
B9B9B9B9B9B9B9B9B8B8B8B8B8B8B8B8B8B8B8B7B7B7B7B7B7B7B7B7B7B7B7B6B6B6B6B6B6B6B6B6
B6B6B6B6B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4
B4B4B4B4B4B4B4B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3
B3B3B3B3B3
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDA
D9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBBBBBAB9B8
B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A5A5A4A3A3A2A1A0A09F9E9E9D9C9C9B
9A9A9998989796969594949392929190908F8E8E8D8D8C8B8B8A8A89888887878685858484838282
818180807F7E7E7D7D7C7C7B7B7A79797878777776767575747473737272717170706F6F6E6E6D6D
6C6C6B6B6B6A6A69696868676767666665656464646363626261616160605F5F5F5E5E5E5D5D5C5C
5C5B5B5B5A5A59595958585857575756565655555554545454535353525252515151515050504F4F
4F4F4E4E4E4E4D4D4D4D4C4C4C4C4B4B4B4B4A4A4A4A4A4949494948484848484747474747474646
46464645454545454544444444444444434343434343434342424242424242424241414141414141
41414141404040404040404040404040404040403F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F
3F3F3F3F3F
>
<
FFFEFDFCFBFAF9F9F8F7F6F5F4F3F2F1F0EFEFEEEDECEBEAE9E8E8E7E6E5E4E3E2E2E1E0DFDEDDDC
DCDBDAD9D8D8D7D6D5D4D3D3D2D1D0CFCFCECDCCCCCBCAC9C8C8C7C6C5C5C4C3C2C2C1C0BFBFBEBD
BCBCBBBAB9B9B8B7B7B6B5B4B4B3B2B2B1B0B0AFAEAEADACACABAAAAA9A8A8A7A6A6A5A4A4A3A2A2
A1A0A09F9F9E9D9D9C9C9B9A9A99989897979696959494939392919190908F8F8E8E8D8C8C8B8B8A
8A89898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A79797978787777
76767575757474737372727271717070706F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767
67666666656565646464636363626262626161616060605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B
5B5B5A5A5A5A59595959585858585857575757565656565655555555555454545454545353535353
535252525252525151515151515150505050505050504F4F4F4F4F4F4F4F4F4E4E4E4E4E4E4E4E4E
4E4E4E4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C
4C4C4C4C4C
>
4 %_Br
[
0 0 0 0 1 1 1 2 28 48.538 %_BS
%_0 0 0 0 1 1 1 2 28 48.538 Bs
0.217807 0.843229 0.577142 0.128969 0.701961 0.247059 0.298039 2 50 100 %_BS
%_0.217807 0.843229 0.577142 0.128969 0.701961 0.247059 0.298039 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Orange, Gelb, Lila)
(Orange, Gelb, Lila) 0 7 Bd
[
<
17171818171717171718181717171717171715151516171716161717171717161616161717181717
1717
>
<
B2B1B0AFAEADABAAA9A8A7A6A5A4A2A1A09F9E9C9B989795959392908F8E8D8C8B8A888786848382
8180
>
<
CCCDCDCECCCDCDCDCECECECDCDCDCDCECECECCCCCDCDCDCECCCCCCCCCCCCCCCBCBCBCBCBCCCCCBCB
CBCB
>
<
02020202020202020303030202020202020202020202020202020202020202020202020202020102
0202
>
<
DDDDDDDDDEDEDEDEDEDEDEDFDFDFDFDFDFDFE0E0E0E0E0E0E1E1E1E1E1E1E1E2E2E2E2E2E2E2E3E3
E3E3
>
<
666768696A6B6C6D6E6F707172737475767778797A7C7D7E7F808182838485868788898A8B8C8D8E
8F90
>
<
3B3B3B3B3C3C3C3C3C3C3C3D3D3D3D3D3D3D3E3E3E3E3E3E3F3F3F3F3F3F3F404040404040404141
4141
>
4 %_Br
<
383736363535343333323131302F2F2E2D2D2C2B2B2928282726252423222120201F1E1D1C1B1A19
1817
>
<
D7D6D5D4D3D2D1D0CFCECDCECDCCCBCAC9C8C7C6C5C4C3C2C1C1BFBEBDBCBBBCBBBAB9B8B7B6B5B4
B3B2
>
<
939498999C9D9EA1A2A5A7A9AAABAEAEB1B2B3B5B6B8B8BABBBCBEBFC1C2C2C3C4C5C6C7C8C8CACA
CCCC
>
<
21201F1E1D1C1B1A19181716151413121211100F0E0C0C0B0B0A0A09080807070606050504040403
0302
>
<
B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADB
DCDD
>
<
3F40414243444546474849494A4B4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061626364
6566
>
<
4C4C4B4B4A4A4A4949484847474746464545454444434342424241414040403F3F3E3E3D3D3D3C3C
3B3B
>
4 %_Br
<
17181819191A1B1B1B1B1C1D1D1E1D1E1F1F20202122222323242525262627282828282929292A29
2A2B2B2B2B2C2D2D2D2D2E2F2F2F2F30313031313132323332333434343435353536353637373737
38
>
<
808182838485868788898A8B8C8D8F8F90929394959697989A9B9C9D9E9FA0A1A2A3A5A6A7A8A9AA
ABADAEAFB1B2B3B4B5B6B7B8B9BABBBCBDBEBFC1C1C2C4C4C6C7C8C9CACBCCCDCFCFD1D2D2D4D5D6
D7
>
<
CBCBCBCBCACACACACACACAC9C8C8C8C7C7C7C7C5C5C5C5C4C4C4C3C2C2C2C2C1C1BFBFBFBEBEBDBD
BAB9B9B8B8B7B7B6B5B4B4B3B3B2B2AFAEADADACACABA8A7A6A5A4A4A3A29F9E9D9C9C9B99969594
93
>
<
0202020202030303040404040405050506060606070707080808090909090A0A0A0B0B0B0C0C0C0C
0D0D0D0E0E0F100F10101112111212131414151516171617171819191A1A1B1C1C1D1D1E1F1F2020
21
>
<
E3E2E2E1E1E0DFDFDEDEDDDCDCDBDBDAD9D9D8D8D7D6D6D5D5D4D3D3D2D2D1D0D0CFCFCECDCDCCCC
CBCACAC9C9C8C7C7C6C6C5C4C4C3C3C2C1C1C0C0BFBEBEBDBDBCBBBBBABAB9B8B8B7B7B6B5B5B4B4
B3
>
<
908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69
68666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140
3F
>
<
41414141424242424242424343434343434343444444444444444545454545454546464646464646
474747474747474748484848484848494949494949494A4A4A4A4A4A4A4A4B4B4B4B4B4B4B4C4C4C
4C
>
4 %_Br
<
7C7A7977777573716F6C6A68676463605D5A58575452504D4B4848464341403F3D3D3C3B3A3A3938
3838373636353534343433323231302F302F2E2E2D2C2B2A2A2A2928272625252423222221202120
1F1E1D1C1B1A1A191817
>
<
E6E4E3E1E0DFDEDCDBDAD8D7D6D4D3D2D0CFCDCCCAC9C8C7C5C4C3C2C0BFBEBDBBBAB9B8B7B6B5B4
B3B2B1B0AFADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989696949392908F8E8D8C8B8A89
88878685858482818180
>
<
16191B1E222526292C2F30323437383A3C3E3F424447484A4D4F5053565A5B5E6163666A6D6E7175
78797D808385888B8E8F919496979A9D9F9FA1A4A5A7A9ABACAEB0B2B3B5B6B8B8B9BBBCBDBEC0C2
C2C4C6C7C7C8C9CACACB
>
<
0203030405060608090A0B0C0E101012141616181A1B1C1D1F20202122222121222121201F1F1E1D
1C1C1C1B1A1918171617161514141312121110100F0E0E0D0D0C0C0B0A0909090808070706060605
05050404030303030202
>
<
96979899999A9B9C9D9E9FA0A0A1A2A3A4A5A6A6A7A8A9AAABACACADAEAFB0B1B2B3B3B4B5B6B7B8
B9B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C6C7C8C9CACBCCCDCDCECFD0D1D2D3D3D4D5D6D7D8D9D9DA
DBDCDDDEDFE0E0E1E2E3
>
<
363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D
5E5F6061626465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80818283848586
8788898A8B8C8D8E8F90
>
<
83828281807F7F7E7D7C7C7B7A79797877767675747373727170706F6E6D6D6C6B6B6A6968686766
65656463626261605F5F5E5D5C5C5B5A59595857575655545453525151504F4E4E4D4C4B4B4A4948
48474645454443424241
>
4 %_Br
<
1718191A1A1B1C1D1E1F20212021222223242525262728292A2A2A2B2C2D2E2E2F302F3031323233
3434343535363637383838393A3A3B3C3D3D3F4041434648484B4D50525457585A5D60636467686A
6C6F7173757777797A7C
>
<
80818182848585868788898A8B8C8D8E8F90929394969698999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8
A9AAABACADAFB0B1B2B3B4B5B6B7B8B9BABBBDBEBFC0C2C3C4C5C7C8C9CACCCDCFD0D2D3D4D6D7D8
DADBDCDEDFE0E1E3E4E6
>
<
CBCACAC9C8C7C7C6C4C2C2C0BEBDBCBBB9B8B8B6B5B3B2B0AEACABA9A7A5A4A19F9F9D9A97969491
8F8E8B888583807D797875716E6D6A6663615E5B5A5653504F4D4A484744423F3E3C3A3837343230
2F2C292625221E1B1916
>
<
0202030303030404050505060606070708080909090A0B0C0C0D0D0E0E0F10101112121314141516
17161718191A1B1C1C1C1D1E1F1F20212122212122222120201F1D1C1B1A181616141210100E0C0B
0A090806060504030302
>
<
E3E2E1E0E0DFDEDDDCDBDAD9D9D8D7D6D5D4D3D3D2D1D0CFCECDCDCCCBCAC9C8C7C6C6C5C4C3C2C1
C0C0BFBEBDBCBBBAB9B9B8B7B6B5B4B3B3B2B1B0AFAEADACACABAAA9A8A7A6A6A5A4A3A2A1A0A09F
9E9D9C9B9A9999989796
>
<
908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69
68676665646261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140
3F3E3D3C3B3A39383736
>
<
4142424344454546474848494A4B4B4C4D4E4E4F50515152535454555657575859595A5B5C5C5D5E
5F5F606162626364656566676868696A6B6B6C6D6D6E6F70707172737374757676777879797A7B7C
7C7D7E7F7F8081828283
>
4 %_Br
<
17171818171717171718181817171717171717171515151516161617171716161616171717171717
17171716161616161616161617171717171718181817171717171717171717171717171717171717
171717171717171717
>
<
B2B1B0AFAEADABAAA9A8A8A7A6A5A4A2A2A1A09F9E9E9C9B9A9A98979795959593939290908F8F8E
8E8D8D8C8C8B8B8A8A8A888887878786868684848483838383828282828281818181818181818080
808080808080808080
>
<
CCCDCDCECCCDCDCDCECECECECDCDCDCDCDCECECECCCCCCCDCDCDCDCDCDCECCCCCCCCCCCCCCCCCCCC
CCCCCCCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCB
CBCBCBCBCBCBCBCBCB
>
<
02020202020202020303030302020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020201010101020202020202020202020202020202
020202020202020202
>
<
DDDDDDDDDEDEDEDEDEDEDEDEDFDFDFDFDFDFDFDFE0E0E0E0E0E0E0E0E0E0E1E1E1E1E1E1E1E1E1E1
E1E1E1E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3
E3E3E3E3E3E3E3E3E3
>
<
666768696A6B6C6D6E6F6F7071727374747576777878797A7B7B7C7D7D7E7F7F8080818282838384
8485858686878788888889898A8A8A8B8B8B8C8C8C8D8D8D8D8E8E8E8E8E8F8F8F8F8F8F8F8F9090
909090909090909090
>
<
3B3B3B3B3C3C3C3C3C3C3C3C3D3D3D3D3D3D3D3D3E3E3E3E3E3E3E3E3E3E3F3F3F3F3F3F3F3F3F3F
3F3F3F40404040404040404040404040404040404041414141414141414141414141414141414141
414141414141414141
>
4 %_Br
[
0.08893 0.50042 0.796017 0.008179 0.890196 0.564706 0.254902 2 50 100 %_BS
%_0.08893 0.50042 0.796017 0.008179 0.890196 0.564706 0.254902 2 50 100 Bs
0.090089 0.699489 0.801572 0.009216 0.866667 0.4 0.231373 2 50 90 %_BS
%_0.090089 0.699489 0.801572 0.009216 0.866667 0.4 0.231373 2 50 90 Bs
0.217807 0.843229 0.577142 0.128969 0.701961 0.247059 0.298039 2 50 79 %_BS
%_0.217807 0.843229 0.577142 0.128969 0.701961 0.247059 0.298039 2 50 79 Bs
0.08893 0.50042 0.796017 0.008179 0.890196 0.564706 0.254902 2 50 64 %_BS
%_0.08893 0.50042 0.796017 0.008179 0.890196 0.564706 0.254902 2 50 64 Bs
0.486976 0.900206 0.086091 0.009094 0.588235 0.211765 0.513726 2 50 47 %_BS
%_0.486976 0.900206 0.086091 0.009094 0.588235 0.211765 0.513726 2 50 47 Bs
0.08893 0.50042 0.796017 0.008179 0.890196 0.564706 0.254902 2 50 30 %_BS
%_0.08893 0.50042 0.796017 0.008179 0.890196 0.564706 0.254902 2 50 30 Bs
0.090089 0.699489 0.801572 0.009216 0.866667 0.4 0.231373 2 28 0 %_BS
%_0.090089 0.699489 0.801572 0.009216 0.866667 0.4 0.231373 2 28 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Schwarz\774bergang)
(Schwarz\774bergang) 0 2 Bd
[
0.743221
0.648188
0.629023
0.813504
0.113725
0.113725
0.105882
4 %_Br
[
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 2 50 100 %_BS
%_0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 2 50 100 Bs
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 2 25 0 %_BS
%_0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 2 25 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Weiche schwarze Vignette)
(Weiche schwarze Vignette) 1 3 Bd
[
0.760098
0.688655
0.631525
0.871
0.086275
0.078431
0.070588
4 %_Br
0.760098
0.688655
0.631525
0.871
0.086275
0.078431
0.070588
4 %_Br
[
0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 68.3944 73.8792 %_BS
%_0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 68.3944 73.8792 Bs
0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 31.8603 88.7329 %_BS
%_0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 31.8603 88.7329 Bs
0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 50 100 %_BS
%_0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Optisches Schachbrett)
(Optisches Schachbrett) 0 0 54.7383 54.7393 [
%AI3_Tile
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 0 m
5.8643 0.9766 L
2.9316 0.9766 L
2.9316 0 L
5.8643 0 L
f
0 5.8652 m
0.9766 5.8652 L
0.9766 2.9316 L
0 2.9316 L
0 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 0.9766 m
2.9316 2.9316 L
0.9766 2.9316 L
0.9766 0.9766 L
2.9316 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 2.9316 m
5.8643 5.8652 L
2.9316 5.8652 L
2.9316 2.9316 L
5.8643 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0.9766 0 m
0.9766 0.9766 L
0 0.9766 L
0 0 L
0.9766 0 L
f
27.3682 0 m
27.3682 0.9766 L
20.5254 0.9766 L
20.5254 0 L
27.3682 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 2.9316 m
27.3682 5.8652 L
20.5254 5.8652 L
20.5254 2.9316 L
27.3682 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 9.7734 m
27.3682 14.6611 L
20.5254 14.6611 L
20.5254 9.7734 L
27.3682 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 5.8652 m
20.5254 9.7734 L
14.6602 9.7734 L
14.6602 5.8652 L
20.5254 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 0.9766 m
9.7734 2.9316 L
5.8643 2.9316 L
5.8643 0.9766 L
9.7734 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 2.9316 m
14.6602 5.8652 L
9.7734 5.8652 L
9.7734 2.9316 L
14.6602 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 0 m
14.6602 0.9766 L
9.7734 0.9766 L
9.7734 0 L
14.6602 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 0.9766 m
20.5254 2.9316 L
14.6602 2.9316 L
14.6602 0.9766 L
20.5254 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 27.3691 m
0.9766 27.3691 L
0.9766 20.5264 L
0 20.5264 L
0 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 27.3691 m
5.8643 27.3691 L
5.8643 20.5264 L
2.9316 20.5264 L
2.9316 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 27.3691 m
14.6602 27.3691 L
14.6602 20.5264 L
9.7734 20.5264 L
9.7734 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 20.5264 m
9.7734 20.5264 L
9.7734 14.6611 L
5.8643 14.6611 L
5.8643 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0.9766 9.7734 m
2.9316 9.7734 L
2.9316 5.8652 L
0.9766 5.8652 L
0.9766 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 14.6611 m
5.8643 14.6611 L
5.8643 9.7734 L
2.9316 9.7734 L
2.9316 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 14.6611 m
0.9766 14.6611 L
0.9766 9.7734 L
0 9.7734 L
0 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0.9766 20.5264 m
2.9316 20.5264 L
2.9316 14.6611 L
0.9766 14.6611 L
0.9766 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 Xa
 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 14.6611 m
20.5254 20.5264 L
14.6602 20.5264 L
14.6602 14.6611 L
20.5254 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 5.8652 m
9.7734 9.7734 L
5.8643 9.7734 L
5.8643 5.8652 L
9.7734 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 9.7734 m
14.6602 14.6611 L
9.7734 14.6611 L
9.7734 9.7734 L
14.6602 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.169772 0.157412 0.036286 0 0.85098 0.839216 0.905882 Xa
 0.169772 0.157412 0.036286 0 0.85098 0.839216 0.905882 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 20.5264 m
27.3682 27.3691 L
20.5254 27.3691 L
20.5254 20.5264 L
27.3682 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 54.7393 m
48.873 53.7627 L
51.8066 53.7627 L
51.8066 54.7393 L
48.873 54.7393 L
f
54.7383 48.874 m
53.7617 48.874 L
53.7617 51.8076 L
54.7383 51.8076 L
54.7383 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 53.7627 m
51.8066 51.8076 L
53.7617 51.8076 L
53.7617 53.7627 L
51.8066 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 51.8076 m
48.873 48.874 L
51.8066 48.874 L
51.8066 51.8076 L
48.873 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
53.7617 54.7393 m
53.7617 53.7627 L
54.7383 53.7627 L
54.7383 54.7393 L
53.7617 54.7393 L
f
27.3682 54.7393 m
27.3682 53.7627 L
34.2109 53.7627 L
34.2109 54.7393 L
27.3682 54.7393 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 51.8076 m
27.3682 48.874 L
34.2109 48.874 L
34.2109 51.8076 L
27.3682 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 44.9639 m
27.3682 40.0762 L
34.2109 40.0762 L
34.2109 44.9639 L
27.3682 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 48.874 m
34.2109 44.9639 L
40.0752 44.9639 L
40.0752 48.874 L
34.2109 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 53.7627 m
44.9639 51.8076 L
48.873 51.8076 L
48.873 53.7627 L
44.9639 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 51.8076 m
40.0752 48.874 L
44.9639 48.874 L
44.9639 51.8076 L
40.0752 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 54.7393 m
40.0752 53.7627 L
44.9639 53.7627 L
44.9639 54.7393 L
40.0752 54.7393 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 53.7627 m
34.2109 51.8076 L
40.0752 51.8076 L
40.0752 53.7627 L
34.2109 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
54.7383 27.3691 m
53.7617 27.3691 L
53.7617 34.2109 L
54.7383 34.2109 L
54.7383 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 27.3691 m
48.873 27.3691 L
48.873 34.2109 L
51.8066 34.2109 L
51.8066 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 27.3691 m
40.0752 27.3691 L
40.0752 34.2109 L
44.9639 34.2109 L
44.9639 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 34.2109 m
44.9639 34.2109 L
44.9639 40.0762 L
48.873 40.0762 L
48.873 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
53.7617 44.9639 m
51.8066 44.9639 L
51.8066 48.874 L
53.7617 48.874 L
53.7617 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 40.0762 m
48.873 40.0762 L
48.873 44.9639 L
51.8066 44.9639 L
51.8066 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
54.7383 40.0762 m
53.7617 40.0762 L
53.7617 44.9639 L
54.7383 44.9639 L
54.7383 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
53.7617 34.2109 m
51.8066 34.2109 L
51.8066 40.0762 L
53.7617 40.0762 L
53.7617 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 Xa
 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 40.0762 m
34.2109 34.2109 L
40.0752 34.2109 L
40.0752 40.0762 L
34.2109 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 48.874 m
44.9639 44.9639 L
48.873 44.9639 L
48.873 48.874 L
44.9639 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 44.9639 m
40.0752 40.0762 L
44.9639 40.0762 L
44.9639 44.9639 L
40.0752 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.169772 0.157412 0.036286 0 0.85098 0.839216 0.905882 Xa
 0.169772 0.157412 0.036286 0 0.85098 0.839216 0.905882 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 34.2109 m
27.3682 27.3691 L
34.2109 27.3691 L
34.2109 34.2109 L
27.3682 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 54.7393 m
2.9316 53.7627 L
0.9766 53.7627 L
0.9766 54.7393 L
2.9316 54.7393 L
f
0 51.8076 m
0 53.7627 L
0.9766 53.7627 L
0.9766 51.8076 L
0 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 48.874 m
2.9316 51.8076 L
0.9766 51.8076 L
0.9766 48.874 L
2.9316 48.874 L
f
5.8643 53.7627 m
5.8643 51.8076 L
2.9316 51.8076 L
2.9316 53.7627 L
5.8643 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 54.7393 m
9.7734 53.7627 L
5.8643 53.7627 L
5.8643 54.7393 L
9.7734 54.7393 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 51.8076 m
14.6602 53.7627 L
9.7734 53.7627 L
9.7734 51.8076 L
14.6602 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 48.874 m
20.5254 51.8076 L
14.6602 51.8076 L
14.6602 48.874 L
20.5254 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 44.9639 m
27.3682 48.874 L
20.5254 48.874 L
20.5254 44.9639 L
27.3682 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 53.7627 m
27.3682 51.8076 L
20.5254 51.8076 L
20.5254 53.7627 L
27.3682 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 54.7393 m
14.6602 53.7627 L
20.5254 53.7627 L
20.5254 54.7393 L
14.6602 54.7393 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 48.874 m
9.7734 51.8076 L
5.8643 51.8076 L
5.8643 48.874 L
9.7734 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 44.9639 m
14.6602 48.874 L
9.7734 48.874 L
9.7734 44.9639 L
14.6602 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 40.0762 m
20.5254 44.9639 L
14.6602 44.9639 L
14.6602 40.0762 L
20.5254 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 Xa
 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 34.2109 m
27.3682 40.0762 L
20.5254 40.0762 L
20.5254 34.2109 L
27.3682 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 44.9639 m
0 48.874 L
0.9766 48.874 L
0.9766 44.9639 L
0 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 44.9639 m
5.8643 48.874 L
2.9316 48.874 L
2.9316 44.9639 L
5.8643 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 40.0762 m
9.7734 44.9639 L
5.8643 44.9639 L
5.8643 40.0762 L
9.7734 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 44.9639 m
2.9316 40.0762 L
0.9766 40.0762 L
0.9766 44.9639 L
2.9316 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 34.2109 m
0 40.0762 L
0.9766 40.0762 L
0.9766 34.2109 L
0 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 27.3691 m
2.9316 34.2109 L
0.9766 34.2109 L
0.9766 27.3691 L
2.9316 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 40.0762 m
5.8643 34.2109 L
2.9316 34.2109 L
2.9316 40.0762 L
5.8643 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 27.3691 m
9.7734 34.2109 L
5.8643 34.2109 L
5.8643 27.3691 L
9.7734 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 40.0762 m
14.6602 34.2109 L
9.7734 34.2109 L
9.7734 40.0762 L
14.6602 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 Xa
 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 27.3691 m
20.5254 34.2109 L
14.6602 34.2109 L
14.6602 27.3691 L
20.5254 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 0 m
51.8066 0.9766 L
53.7617 0.9766 L
53.7617 0 L
51.8066 0 L
f
54.7383 2.9316 m
54.7383 0.9766 L
53.7617 0.9766 L
53.7617 2.9316 L
54.7383 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 5.8652 m
51.8066 2.9316 L
53.7617 2.9316 L
53.7617 5.8652 L
51.8066 5.8652 L
f
48.873 0.9766 m
48.873 2.9316 L
51.8066 2.9316 L
51.8066 0.9766 L
48.873 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 0 m
44.9639 0.9766 L
48.873 0.9766 L
48.873 0 L
44.9639 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 2.9316 m
40.0752 0.9766 L
44.9639 0.9766 L
44.9639 2.9316 L
40.0752 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 5.8652 m
34.2109 2.9316 L
40.0752 2.9316 L
40.0752 5.8652 L
34.2109 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 9.7734 m
27.3682 5.8652 L
34.2109 5.8652 L
34.2109 9.7734 L
27.3682 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 0.9766 m
27.3682 2.9316 L
34.2109 2.9316 L
34.2109 0.9766 L
27.3682 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 0 m
40.0752 0.9766 L
34.2109 0.9766 L
34.2109 0 L
40.0752 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 5.8652 m
44.9639 2.9316 L
48.873 2.9316 L
48.873 5.8652 L
44.9639 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 9.7734 m
40.0752 5.8652 L
44.9639 5.8652 L
44.9639 9.7734 L
40.0752 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 14.6611 m
34.2109 9.7734 L
40.0752 9.7734 L
40.0752 14.6611 L
34.2109 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 Xa
 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 20.5264 m
27.3682 14.6611 L
34.2109 14.6611 L
34.2109 20.5264 L
27.3682 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
54.7383 9.7734 m
54.7383 5.8652 L
53.7617 5.8652 L
53.7617 9.7734 L
54.7383 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 9.7734 m
48.873 5.8652 L
51.8066 5.8652 L
51.8066 9.7734 L
48.873 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 14.6611 m
44.9639 9.7734 L
48.873 9.7734 L
48.873 14.6611 L
44.9639 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 9.7734 m
51.8066 14.6611 L
53.7617 14.6611 L
53.7617 9.7734 L
51.8066 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 Xa
 1 1 0.350011 0.288548 0.133333 0.086275 0.337255 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
54.7383 20.5264 m
54.7383 14.6611 L
53.7617 14.6611 L
53.7617 20.5264 L
54.7383 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 Xa
 0.925689 0.944793 0.235966 0.134585 0.231373 0.176471 0.415686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 27.3691 m
51.8066 20.5264 L
53.7617 20.5264 L
53.7617 27.3691 L
51.8066 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 Xa
 0.782284 0.778225 0.211917 0.060395 0.333333 0.278431 0.498039 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 14.6611 m
48.873 20.5264 L
51.8066 20.5264 L
51.8066 14.6611 L
48.873 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 Xa
 0.567987 0.536217 0.145205 0.012055 0.509804 0.47451 0.65098 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 27.3691 m
44.9639 20.5264 L
48.873 20.5264 L
48.873 27.3691 L
44.9639 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 Xa
 0.357305 0.331579 0.089326 0.00177 0.690196 0.666667 0.788235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 14.6611 m
40.0752 20.5264 L
44.9639 20.5264 L
44.9639 14.6611 L
40.0752 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 Xa
 0.258274 0.228885 0.060334 0 0.776471 0.764706 0.854902 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 27.3691 m
34.2109 20.5264 L
40.0752 20.5264 L
40.0752 27.3691 L
34.2109 27.3691 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat 40)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7767.4521 7891.5967 m
-7375.6909 7891.5967 L
-7375.6909 7799.9077 L
-7767.4521 7799.9077 L
-7767.4521 7891.5967 L
n
0 O
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 Xa
1 XR
-7380.3535 7833.9199 m
-7382.1113 7833.9199 -7501.7817 7836.0918 -7577.6519 7837.4717 C
-7598.4663 7836.5352 -7619.2529 7835.2222 -7640.0547 7833.5024 C
-7642.5327 7833.1509 -7645.3472 7832.7949 -7646.8584 7832.6006 c
-7647.7114 7832.4863 -7648.5732 7832.3853 -7649.4375 7832.2935 C
-7648.9829 7832.0605 -7648.54 7831.7998 -7648.1167 7831.4941 C
-7647.25 7830.7324 -7646.3955 7829.8325 -7645.8735 7828.4541 C
-7645.8979 7828.1685 -7645.6997 7827.8188 -7645.6523 7827.5293 c
-7645.5532 7826.9116 -7645.6382 7826.1631 -7645.7319 7825.6274 c
-7645.7939 7825.2725 -7645.9551 7825.0254 -7646.0259 7824.7314 c
-7646.0488 7824.6348 -7645.9785 7824.5757 -7646.0059 7824.5024 c
-7646.1396 7824.1484 -7646.5313 7823.5518 -7646.7539 7823.2261 c
-7646.8579 7823.0757 -7646.9873 7822.9775 -7647.1035 7822.8188 c
-7647.1196 7822.7964 -7647.0669 7822.7349 -7647.0928 7822.7061 c
-7647.6484 7822.0664 -7648.4312 7821.5415 -7649.3955 7821.0757 c
-7649.4546 7821.0508 -7649.4639 7821.1445 -7649.5366 7821.0869 C
-7649.8213 7820.9653 -7650.1143 7820.8535 -7650.3945 7820.7915 c
-7651.8965 7820.4629 -7653.7163 7820.8477 -7654.8027 7821.6328 c
-7655.7998 7822.3555 -7656.5308 7823.8623 -7656.4678 7825.0742 c
-7656.4126 7826.1094 -7655.6665 7827.2573 -7654.4458 7828.0352 c
-7653.3604 7828.7295 -7652.0479 7828.9829 -7651.2373 7828.3589 C
-7651.6499 7828.2295 -7651.9688 7828.0332 -7652.0811 7827.7524 C
-7652.0908 7827.4766 -7652.0967 7827.1992 -7651.8755 7826.8589 C
-7651.4517 7826.4863 -7650.7925 7826.2485 -7650.1235 7826.7158 c
-7649.1846 7827.3701 -7649.0728 7828.7886 -7650.0342 7829.5356 C
-7650.3086 7829.6406 -7650.5586 7829.8789 -7650.75 7829.9829 c
-7651.1826 7830.2192 -7651.5586 7830.3853 -7651.9751 7830.5435 c
-7653.0938 7830.9595 -7654.4839 7831.4185 -7655.5327 7831.5967 c
-7655.7114 7831.6284 -7655.8989 7831.6475 -7656.0806 7831.6733 C
-7659.4038 7831.3789 -7662.54 7831.0693 -7665.1416 7830.5264 C
-7665.1138 7830.5229 -7665.0908 7830.5244 -7665.0586 7830.5205 c
-7664.2378 7830.4199 -7663.6309 7830.2524 -7662.9043 7830.0127 c
-7662.6328 7829.9238 -7662.3184 7829.9116 -7662.0825 7829.8149 c
-7661.9985 7829.7856 -7661.9409 7829.6597 -7661.8472 7829.6133 c
-7661.5371 7829.4604 -7661.2129 7829.3662 -7660.8999 7829.1597 c
-7659.9097 7828.5054 -7658.8774 7827.3359 -7658.7617 7825.8677 C
-7658.9463 7824.8262 -7659.3643 7823.8525 -7660.5938 7823.0781 c
-7660.7217 7822.9951 -7660.8662 7822.96 -7660.9995 7822.8828 C
-7662.8516 7822.2168 -7664.5913 7823.3135 -7664.8066 7825.2061 C
-7664.7119 7825.3755 -7664.6499 7825.5527 -7664.6616 7825.7524 C
-7664.2939 7826.4492 -7662.9033 7827.0557 -7662.3057 7826.6143 C
-7662.6133 7826.5566 -7662.7495 7826.5254 -7662.8638 7826.2637 C
-7662.8892 7825.6069 -7662.0679 7825.4336 -7661.6528 7826.0176 C
-7661.4966 7826.7021 -7661.7676 7827.2524 -7662.2939 7827.8101 c
-7662.5068 7828.0352 -7662.7837 7828.1685 -7663.0566 7828.3545 c
-7663.4199 7828.6016 -7663.7495 7828.8828 -7664.1118 7829.0332 c
-7664.4385 7829.1685 -7664.8115 7829.2012 -7665.1445 7829.2886 c
-7665.2349 7829.3101 -7665.2969 7829.3613 -7665.3706 7829.3789 c
-7665.6274 7829.4336 -7665.8359 7829.5142 -7666.0879 7829.5469 c
-7666.4209 7829.5854 -7666.7739 7829.5488 -7667.1528 7829.5854 c
-7667.3398 7829.6055 -7667.5195 7829.6943 -7667.7144 7829.7109 c
-7667.8413 7829.7207 -7667.9722 7829.7207 -7668.1025 7829.7222 C
-7670.8135 7828.8213 -7673.0957 7827.6094 -7674.9814 7825.2783 c
-7678.6704 7820.7222 -7673.0415 7816.5566 -7671.9902 7820.5967 C
-7673.9668 7822.0352 -7677.5874 7825.1196 -7669.8892 7825.2471 C
-7661.6045 7823.7549 -7668.6982 7808.4917 -7678.6509 7812.5576 c
-7687.0151 7815.9741 -7683.1328 7824.6382 -7677.4658 7828.2935 c
-7668.9902 7833.7559 -7659.5376 7834.4917 -7649.7012 7834.5845 C
-7660.3862 7839.0488 -7674.9243 7836.4028 -7682.9897 7828.3804 c
-7687.1011 7824.2935 -7691.0435 7817.9912 -7689.8193 7811.8896 c
-7688.5742 7805.6816 -7682.1616 7811.4238 -7687.0957 7811.4424 C
-7686.8896 7817.0054 -7673.6387 7810.9648 -7679.9307 7802.8271 c
-7685.6011 7795.4917 -7695.5698 7803.5225 -7697.3242 7809.9478 c
-7703.0239 7830.8359 -7673.3545 7836.7119 -7659.3813 7837.4238 C
-7671.1143 7840.7749 -7687.3892 7838.2734 -7698.5547 7833.7856 c
-7702.9663 7832.0093 -7707.9707 7828.8926 -7710.5479 7824.7773 c
-7714.4619 7818.5264 -7707.4268 7814.2837 -7706.8955 7816.4028 c
-7706.4697 7818.0957 -7712.3765 7818.6235 -7707.8267 7821.6992 c
-7703.8091 7824.4185 -7700.2759 7818.2095 -7699.4619 7815.0781 c
-7695.6782 7800.5317 -7717.0601 7802.4604 -7719.3667 7816.1982 c
-7724.5103 7846.8271 -7678.3071 7840.4575 -7662.4902 7839.5928 C
-7662.7124 7839.7612 -7662.9331 7839.9189 -7663.1543 7840.0825 C
-7668.4346 7841.585 -7673.6416 7843.7861 -7678.46 7846.5469 C
-7692.9546 7848.2813 -7705.7495 7837.8901 -7721.5913 7832.6152 c
-7730.5635 7829.6284 -7741.0933 7833.9277 -7749.2778 7829.3145 c
-7753.6235 7826.8545 -7756.6982 7824.2656 -7758.2959 7819.0518 C
-7759.9092 7810.1104 -7750.2979 7808.9717 -7752.1396 7813.6416 C
-7753.8428 7813.9688 -7753.1772 7812.8345 -7754.3354 7812.8413 C
-7758.2861 7816.5479 -7750.0244 7821.7314 -7746.1606 7818.4316 c
-7739.4497 7812.7031 -7744.2563 7804.3325 -7751.0864 7802.0557 C
-7769.5703 7802.25 -7770 7824.8613 -7764.0474 7837.3589 c
-7748.2217 7870.585 -7714.1445 7858.5825 -7686.5376 7851.5479 C
-7690.2817 7854.0732 -7692.8975 7857.6421 -7695.5747 7861.2158 c
-7700.2197 7867.4165 -7702.6694 7876.8545 -7694.0024 7880.8613 C
-7693.1616 7884.9829 -7691.6392 7888.8853 -7687.5669 7890.7695 c
-7682.7471 7893 -7677.8457 7890.5581 -7676.5508 7885.4512 C
-7676.4766 7882.6719 -7677.1968 7880.8262 -7679.5938 7879.3887 c
-7681.1733 7878.4414 -7686.5176 7878.5308 -7683.8574 7881.5342 C
-7681.9663 7880.0415 -7682.1323 7882.4863 -7683.0112 7883.6006 C
-7685.8823 7883.5693 -7686.5771 7881.4863 -7686.5156 7878.5181 c
-7686.5151 7878.4956 -7686.5142 7878.4688 -7686.5146 7878.4429 C
-7686.3574 7871.1367 -7685.1343 7865.3237 -7683.0718 7860.7285 C
-7683.0713 7860.73 -7683.0708 7860.7314 -7683.0698 7860.7324 c
-7682.8242 7861.2158 -7682.4819 7861.5 -7682.2485 7861.8945 c
-7682.1729 7862.0225 -7682.2495 7862.1382 -7682.1753 7862.2334 c
-7681.8262 7862.6855 -7680.9971 7863.3701 -7680.5313 7863.7397 c
-7680.3135 7863.9116 -7680.0835 7863.9985 -7679.8477 7864.1724 c
-7679.8125 7864.1973 -7679.8613 7864.3101 -7679.8115 7864.3413 c
-7678.7256 7865.0176 -7677.3638 7865.4277 -7675.7661 7865.6709 C
-7675.6699 7865.6816 -7675.6978 7865.5435 -7675.5669 7865.5933 C
-7675.1035 7865.6406 -7674.6309 7865.6733 -7674.1982 7865.6382 c
-7671.8862 7865.4453 -7669.4316 7864.0845 -7668.2129 7862.4668 c
-7667.0942 7860.9854 -7666.7095 7858.4854 -7667.3379 7856.7646 c
-7667.8774 7855.2949 -7669.4629 7853.9692 -7671.5684 7853.3901 c
-7673.4419 7852.8735 -7675.4492 7853.0845 -7676.3408 7854.3477 C
-7675.6875 7854.3535 -7675.1406 7854.4941 -7674.8545 7854.8477 C
-7674.7178 7855.2422 -7674.5859 7855.6382 -7674.7539 7856.2261 C
-7675.2002 7856.9541 -7676.0469 7857.5894 -7677.2178 7857.2124 c
-7678.4604 7856.8135 -7679.2119 7855.5781 -7679.0532 7854.3486 C
-7673.7505 7848.2031 -7666.0386 7845.6465 -7657.2539 7845.0527 C
-7657.2886 7845.0688 -7657.3218 7845.0796 -7657.3604 7845.0972 c
-7658.5015 7845.6064 -7659.3027 7846.1143 -7660.2437 7846.7832 c
-7660.5957 7847.0332 -7661.0439 7847.1909 -7661.3428 7847.4316 c
-7661.4492 7847.5166 -7661.4766 7847.7222 -7661.5913 7847.8301 c
-7661.9707 7848.1895 -7662.3975 7848.4688 -7662.7563 7848.9063 c
-7663.8945 7850.2886 -7664.8662 7852.4341 -7664.3809 7854.6016 C
-7663.6523 7856.0225 -7662.6162 7857.2437 -7660.4995 7857.8145 c
-7660.2788 7857.8755 -7660.0542 7857.8623 -7659.8276 7857.9185 C
-7656.8613 7858.0527 -7654.8369 7855.7021 -7655.3667 7852.8755 C
-7655.5781 7852.6733 -7655.7471 7852.4429 -7655.8184 7852.1509 C
-7656.6582 7851.3101 -7658.9336 7851.0508 -7659.5996 7851.9517 C
-7659.1309 7851.9004 -7658.9199 7851.8848 -7658.6387 7852.2109 C
-7658.3105 7853.1475 -7659.4189 7853.7612 -7660.2759 7853.1045 C
-7660.8052 7852.1865 -7660.6587 7851.2695 -7660.1479 7850.2314 c
-7659.9409 7849.8101 -7659.5991 7849.5 -7659.2881 7849.1104 c
-7658.8735 7848.5933 -7658.5239 7848.0415 -7658.0669 7847.6621 c
-7657.6563 7847.3232 -7657.1318 7847.1094 -7656.6899 7846.8364 c
-7656.5708 7846.7646 -7656.5039 7846.6636 -7656.4043 7846.6069 c
-7656.0596 7846.4111 -7655.7935 7846.2031 -7655.4438 7846.0469 c
-7654.9819 7845.8413 -7654.4561 7845.7373 -7653.9253 7845.5142 c
-7653.6636 7845.4063 -7653.4443 7845.1948 -7653.1709 7845.085 c
-7653.0063 7845.0215 -7652.8311 7844.9688 -7652.6592 7844.9141 C
-7651.2695 7844.9185 -7649.8613 7844.9575 -7648.4375 7845.0342 c
-7646.7285 7845.0796 -7644.4653 7845.0933 -7642.5728 7845.1665 C
-7610.4688 7841.6533 -7577.98 7840.73 -7545.4746 7840.2822 C
-7472.0664 7841.6152 -7381.8774 7843.2485 -7380.3535 7843.2485 c
-7377.7773 7843.2485 -7375.6909 7841.1597 -7375.6909 7838.5845 c
-7375.6909 7836.0078 -7377.7773 7833.9199 -7380.3535 7833.9199 c
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ Oval - 10 Pt./ Adobe ArtOnPath) -
( Brush Tool/ Bl\374tenst\344nder/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(Oval - 10 Pt.)
(1 10 10 75 75 -20 110 1 0 1 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Bl\774tenst\744nder)
(1 / Unnamed Brush Pat 40/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.912474 0.787625 0.619837 0.97467 ([Passermarken]) 0 Xs
([Passermarken])
Pc
0 0 0 0 1 1 1 Xa
(Wei\737)
Pc
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 Xa
(Schwarz)
Pc
0.001648 0.996399 0.976776 0.001984 0.890196 0.023529 0.07451 Xa
(CMYK Rot)
Pc
0.045655 0 0.888395 0 1 0.929412 0 Xa
(CMYK Gelb)
Pc
0.838651 0.115511 0.962341 0.010986 0 0.588235 0.25098 Xa
(CMYK Gr\774n)
Pc
0.75079 0.216068 0 0 0 0.623529 0.890196 Xa
(CMYK Cyan)
Pc
0.996765 0.965789 0.0878 0.011505 0.192157 0.152941 0.513726 Xa
(CMYK Blau)
Pc
0.008942 0.971435 0.039033 0 0.901961 0 0.494118 Xa
(CMYK Magenta)
Pc
0.17554 1 0.904204 0.07599 0.745098 0.086275 0.133333 Xa
(C=15 M=100 Y=90 K=10)
Pc
0.003632 0.899077 0.849912 0 0.901961 0.2 0.164706 Xa
(C=0 M=90 Y=85 K=0)
Pc
0 0.797818 0.941039 0.001312 0.913725 0.305882 0.105882 Xa
(C=0 M=80 Y=95 K=0)
Pc
0.001892 0.501549 0.97351 0.000214 0.952941 0.572549 0 Xa
(C=0 M=50 Y=100 K=0)
Pc
0 0.348089 0.850645 0 0.976471 0.698039 0.2 Xa
(C=0 M=35 Y=85 K=0)
Pc
0.054566 0 0.886961 0 0.988235 0.917647 0.062745 Xa
(C=5 M=0 Y=90 K=0)
Pc
0.198093 0.004028 0.946899 0 0.870588 0.862745 0 Xa
(C=20 M=0 Y=100 K=0)
Pc
0.49955 0 0.994995 0 0.584314 0.756863 0.121569 Xa
(C=50 M=0 Y=100 K=0)
Pc
0.746487 0 0.995239 0 0.227451 0.666667 0.207843 Xa
(C=75 M=0 Y=100 K=0)
Pc
0.852354 0.169528 1 0.034516 0 0.552941 0.211765 Xa
(C=85 M=10 Y=100 K=10)
Pc
0.902007 0.328862 0.959106 0.261204 0 0.4 0.2 Xa
(C=90 M=30 Y=95 K=30)
Pc
0.748501 0 0.747158 0 0.184314 0.67451 0.4 Xa
(C=75 M=0 Y=75 K=0)
Pc
0.783505 0.110475 0.44947 0.004547 0 0.631373 0.603922 Xa
(C=80 M=10 Y=45 K=0)
Pc
0.698512 0.160403 0 0 0.211765 0.662745 0.882353 Xa
(C=70 M=15 Y=0 K=0)
Pc
0.84799 0.496101 0.001801 0 0.113725 0.443137 0.721569 Xa
(C=85 M=50 Y=0 K=0)
Pc
1 0.932494 0.097414 0.010742 0.176471 0.180392 0.513726 Xa
(C=100 M=95 Y=5 K=0)
Pc
1 0.984619 0.300084 0.228214 0.160784 0.137255 0.360784 Xa
(C=100 M=100 Y=25 K=25)
Pc
0.754849 0.993286 0.022736 0.003998 0.4 0.141176 0.513726 Xa
(C=75 M=100 Y=0 K=0)
Pc
0.504448 0.995972 0.008453 0.00296 0.584314 0.105882 0.505882 Xa
(C=50 M=100 Y=0 K=0)
Pc
0.277195 0.983795 0.289403 0.177462 0.639216 0.098039 0.356863 Xa
(C=35 M=100 Y=35 K=10)
Pc
0.087526 0.996979 0.47953 0.017273 0.839216 0.043137 0.321569 Xa
(C=10 M=100 Y=50 K=0)
Pc
0 0.945342 0.193301 0.00058 0.905882 0.113725 0.45098 Xa
(C=0 M=95 Y=20 K=0)
Pc
0.216587 0.233188 0.379309 0.044099 0.796078 0.733333 0.627451 Xa
(C=25 M=25 Y=40 K=0)
Pc
0.312474 0.397589 0.43888 0.187289 0.643137 0.541176 0.482353 Xa
(C=40 M=45 Y=50 K=5)
Pc
0.424475 0.449012 0.55465 0.344823 0.482353 0.415686 0.345098 Xa
(C=50 M=50 Y=60 K=25)
Pc
0.444495 0.53402 0.578546 0.504479 0.388235 0.305882 0.258824 Xa
(C=55 M=60 Y=65 K=40)
Pc
0.193301 0.373053 0.629145 0.074159 0.792157 0.619608 0.403922 Xa
(C=25 M=40 Y=65 K=0)
Pc
0.24979 0.475837 0.732998 0.162539 0.694118 0.498039 0.290196 Xa
(C=30 M=50 Y=75 K=10)
Pc
0.306889 0.577478 0.779446 0.294591 0.576471 0.376471 0.215686 Xa
(C=35 M=60 Y=80 K=25)
Pc
0.340551 0.624384 0.865385 0.409461 0.490196 0.305882 0.141176 Xa
(C=40 M=65 Y=90 K=35)
Pc
0.375372 0.678492 0.965057 0.525902 0.407843 0.235294 0.066667 Xa
(C=40 M=70 Y=100 K=50)
Pc
0.468452 0.683467 0.780606 0.716243 0.262745 0.160784 0.094118 Xa
(C=50 M=70 Y=80 K=70)
Pc
Bb
2 (Schwarz\774bergang) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Schwarz\774bergang)
Pc
Bb
0 0 0 0 Bh
2 (Weiche schwarze Vignette) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Weiche schwarze Vignette)
Pc
Bb
2 (Orange, Gelb, Lila) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Orange, Gelb, Lila)
Pc
Bb
0 0 0 0 Bh
2 (Lachsfarben radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Lachsfarben radial)
Pc
(Optisches Schachbrett) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Optisches Schachbrett)
Pc
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 Xa
(C=0 M=0 Y=0 K=100)
Pc
0.66363 0.566125 0.55111 0.600732 0.235294 0.235294 0.231373 Xa
(C=0 M=0 Y=0 K=90)
Pc
0.593744 0.492622 0.488838 0.418311 0.341176 0.341176 0.337255 Xa
(C=0 M=0 Y=0 K=80)
Pc
0.531518 0.433936 0.42591 0.279881 0.439216 0.435294 0.435294 Xa
(C=0 M=0 Y=0 K=70)
Pc
0.47129 0.36878 0.36878 0.174716 0.529412 0.529412 0.529412 Xa
(C=0 M=0 Y=0 K=60)
Pc
0.397436 0.307927 0.320073 0.100069 0.615686 0.615686 0.611765 Xa
(C=0 M=0 Y=0 K=50)
Pc
0.328893 0.24802 0.257694 0.045808 0.698039 0.698039 0.698039 Xa
(C=0 M=0 Y=0 K=40)
Pc
0.2551 0.187503 0.19794 0.016297 0.776471 0.776471 0.776471 Xa
(C=0 M=0 Y=0 K=30)
Pc
0.171847 0.120424 0.133059 0.001312 0.854902 0.854902 0.854902 Xa
(C=0 M=0 Y=0 K=20)
Pc
0.083955 0.058015 0.068391 0 0.929412 0.929412 0.929412 Xa
(C=0 M=0 Y=0 K=10)
Pc
0.041901 0.031647 0.036683 0 0.964706 0.964706 0.964706 Xa
(C=0 M=0 Y=0 K=5)
Pc
0.090089 0.699489 0.801572 0.009216 0.866667 0.4 0.231373 Xa
(C=0 M=0 Y=0 K=40)
Pc
0.08893 0.50042 0.796017 0.008179 0.890196 0.564706 0.254902 Xa
(C=0 M=0 Y=0 K=30)
Pc
0.648341 0.091951 1 0.002686 0.411765 0.658824 0.184314 Xa
(C=0 M=0 Y=0 K=20)
Pc
0.486976 0.900206 0.086091 0.009094 0.588235 0.211765 0.513726 Xa
(C=0 M=0 Y=0 K=10)
Pc
0.217807 0.843229 0.577142 0.128969 0.701961 0.247059 0.298039 Xa
(C=0 M=0 Y=0 K=5)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Ebene 1) Ln
0 A
1 Ap
0 O
0 0 0 0 1 1 1 Xa
0 R
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 XA
0 J 0 j 1 w 10 M []0 d0 XR
446.2969 -349.2158 m
99.6758 -349.2158 L
99.6758 -155.2974 L
446.2969 -155.2974 L
446.2969 -349.2158 L
b
574.6758 -446.5137 m
218.5947 -446.5137 L
218.5947 -214.0811 L
574.6758 -214.0811 L
574.6758 -446.5137 L
b
0 Ap
446.2969 -155.2974 m
574.6758 -214.0811 L
S
99.6758 -155.2974 m
218.5947 -214.0811 L
S
99.6758 -349.2158 m
218.5947 -446.5137 L
S
u
0 To
1 0 0 1 282.1079 -303.2705 0 Tp
0 Tv
TP
1 0 0 1 282.1079 -303.2705 Tm
0 Tr
0 O
0.912474 0.787625 0.619837 0.97467 0 0 0 Xa
4 M/_MyriadPro-Regular 12 10.0441 -3 Tf
100 100 Tz
0 Tt
%_ 3 XL
0 0 Tl
0 TV
0 Tc
(\110\105\114) Tx 1 0 Tk
TO
0 To
1 0 0 1 301.4995 -303.2705 0 Tp
0 Tv
TP
1 0 0 1 301.4995 -303.2705 Tm
0 Tr
0 TV
-0.468262 Tc
(\114) Tx 1 39 Tk
TO
0 To
1 0 0 1 306.6953 -303.2705 0 Tp
0 Tv
TP
1 0 0 1 306.6953 -303.2705 Tm
0 Tr
0 TV
0 Tc
(\117) Tx 1 0 Tk
TO
0 To
1 0 0 1 314.9634 -303.2705 0 Tp
0 Tv
TP
1 0 0 1 314.9634 -303.2705 Tm
0 Tr
0 TV
-0.432129 Tc
(\040) Tx 1 36 Tk
TO
0 To
1 0 0 1 317.0752 -303.2705 0 Tp
0 Tv
TP
1 0 0 1 317.0752 -303.2705 Tm
0 Tr
0 TV
0.000488 Tc
(\127\117\122\114\104\040) Tx 1 0 Tk
TO
0 To
1 0 0 1 282.1079 -332.0703 0 Tp
0 Tv
TP
1 0 0 1 282.1079 -332.0703 Tm
0 Tr
0 TV
0 Tc
(\111\040\141\155\040) Tx 1 0 Tk
TO
0 To
1 0 0 1 305.8555 -332.0703 0 Tp
0 Tv
TP
1 0 0 1 305.8555 -332.0703 Tm
0 Tr
0 TV
-0.119629 Tc
(\171) Tx 1 0 Tk
TO
0 To
1 0 0 1 311.3877 -332.0703 0 Tp
0 Tv
TP
1 0 0 1 311.3877 -332.0703 Tm
0 Tr
0 TV
0 Tc
(\157\165\162\040\105\120\123\054\040\143) Tx 1 0 Tk
TO
0 To
1 0 0 1 359.6626 -332.0703 0 Tp
0 Tv
TP
1 0 0 1 359.6626 -332.0703 Tm
0 Tr
0 TV
-0.119629 Tc
(\162) Tx 1 0 Tk
TO
0 To
1 0 0 1 363.4668 -332.0703 0 Tp
0 Tv
TP
1 0 0 1 363.4668 -332.0703 Tm
0 Tr
0 TV
0 Tc
(\145) Tx 1 0 Tk
TO
0 To
1 0 0 1 369.4785 -332.0703 0 Tp
0 Tv
TP
1 0 0 1 369.4785 -332.0703 Tm
0 Tr
0 TV
-0.047852 Tc
(\141) Tx 1 10 Tk
TO
0 To
1 0 0 1 375.2148 -332.0703 0 Tp
0 Tv
TP
1 0 0 1 375.2148 -332.0703 Tm
0 Tr
0 TV
-0.071777 Tc
(\164) Tx 1 0 Tk
TO
0 To
1 0 0 1 379.1147 -332.0703 0 Tp
0 Tv
TP
1 0 0 1 379.1147 -332.0703 Tm
0 Tr
0 TV
0 Tc
(\145\144\040\167\151\164\150\040\040\103\123\65\040\041) Tx 1 0 Tk
TO
U

LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
